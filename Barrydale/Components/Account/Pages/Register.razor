@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Barrydale.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Register - Barrydale Tourism</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-logo">
            <div class="logo-circle">BT</div>
        </div>
        
        <div class="auth-header">
            <h1>Create Account</h1>
            <p>Join the Barrydale Tourism community</p>
        </div>
        
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="auth-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email" class="text-center">Email Address</label>
                <InputText @bind-Value="Input.Email" class="form-control" id="email" autocomplete="username" aria-required="true" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="error-message" />
            </div>
            
            <div class="form-group">
                <label for="password" class="text-center">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" autocomplete="new-password" aria-required="true" placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="error-message" />
            </div>
            
            <div class="form-group">
                <label for="confirm-password" class="text-center">Confirm Password</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" id="confirm-password" autocomplete="new-password" aria-required="true" placeholder="Confirm your password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="error-message" />
            </div>
            
            <button type="submit" class="btn-submit">Create Account</button>
            
            <div class="auth-footer">
                <span>Already have an account?</span>
                <a href="/login-page" class="auth-link">Sign In</a>
            </div>
        </EditForm>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModalLabel">Registration Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="error-icon-container">
                    <i class="bi bi-exclamation-circle error-icon"></i>
                </div>
                <p class="error-message-text">@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #3498db;
        --primary-dark: #2980b9;
        --text-color: #333;
        --text-light: #7f8c8d;
        --border-color: #e1e1e1;
        --background-color: #3498db;
        --error-color: #e74c3c;
        --card-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    }

    /* Main container */
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: var(--background-color);
        padding: 1.5rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Card styles */
    .auth-card {
        width: 100%;
        max-width: 450px;
        background-color: white;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        padding: 2.5rem 2.5rem;
        overflow: hidden;
    }

    /* Logo */
    .auth-logo {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .logo-circle {
        width: 70px;
        height: 70px;
        background-color: var(--primary-color);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 1.75rem;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.2);
    }

    /* Header */
    .auth-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .auth-header h1 {
        color: var(--text-color);
        font-size: 1.75rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .auth-header p {
        color: var(--text-light);
        font-size: 0.95rem;
    }

    /* Form */
    .auth-form {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        padding: 0 10px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        text-align: center;
    }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 0.25rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background-color: #f8f9fa;
        transition: all 0.2s ease;
        text-align: center;
        max-width: 95%;
        margin: 0 auto;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.15);
    }

    .form-control::placeholder {
        color: #aaa;
        text-align: center;
    }

    /* Button */
    .btn-submit {
        margin-top: 0.75rem;
        width: 95%;
        margin: 0.75rem auto 0;
        padding: 0.9rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-submit:hover {
        background-color: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(52, 152, 219, 0.2);
    }

    .btn-submit:active {
        transform: translateY(0);
    }

    /* Footer */
    .auth-footer {
        margin-top: 1.5rem;
        text-align: center;
        font-size: 0.9rem;
        color: var(--text-light);
    }

    .auth-link {
        color: var(--primary-color);
        font-weight: 500;
        text-decoration: none;
        margin-left: 0.3rem;
        transition: color 0.2s;
    }

    .auth-link:hover {
        color: var(--primary-dark);
        text-decoration: underline;
    }

    /* Error message */
    .error-message {
        color: var(--error-color);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        text-align: center;
    }
    
    /* Modal styles */
    .modal-content {
        border: none;
        border-radius: 12px;
    }
    
    .modal-header {
        border-bottom: 1px solid rgba(0,0,0,0.05);
        background-color: #f8f9fa;
    }
    
    .modal-title {
        font-weight: 600;
        color: var(--text-color);
    }
    
    .modal-footer {
        border-top: 1px solid rgba(0,0,0,0.05);
        background-color: #f8f9fa;
    }
    
    .error-icon-container {
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .error-icon {
        font-size: 3rem;
        color: var(--error-color);
    }
    
    .error-message-text {
        text-align: center;
        font-size: 1.1rem;
        color: var(--text-color);
    }
    
    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        padding: 0.5rem 1.5rem;
    }
    
    .btn-primary:hover {
        background-color: var(--primary-dark);
        border-color: var(--primary-dark);
    }

    /* Responsive */
    @@media (max-width: 576px) {
        .auth-card {
            padding: 2rem 1.5rem;
        }
        
        .logo-circle {
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
        }
        
        .auth-header h1 {
            font-size: 1.5rem;
        }
    }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private string? errorMessage;
    private bool showErrorAfterRender = false;
    private IJSObjectReference? _module;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            errorMessage = string.Join("<br>", identityErrors.Select(error => error.Description));
            showErrorAfterRender = true;
            
            await InvokeAsync(StateHasChanged);
            
            // Only try to show the modal if we're not statically rendering
            try
            {
                // Try to set the error message directly in the DOM
                string escapedErrorMessage = errorMessage.Replace("\"", "\\\"").Replace("\n", "\\n");
                await JSRuntime.InvokeVoidAsync("eval", $@"
                    try {{
                        const errorElement = document.querySelector('.error-message-text');
                        if (errorElement) {{
                            errorElement.innerHTML = ""{escapedErrorMessage}"";
                        }}
                    }} catch (error) {{
                        console.error('Error setting error message:', error);
                    }}
                ");
                
                // Try to show the modal
                if (_module != null)
                {
                    await _module.InvokeVoidAsync("showModal", "errorModal");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showErrorModal");
                }
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
            {
                // Ignore JavaScript interop errors during static rendering
                // The modal will be available after hydration
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling registration failure: {ex.Message}");
            }
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Skip email confirmation since we don't have email services
        await UserManager.ConfirmEmailAsync(user, await UserManager.GenerateEmailConfirmationTokenAsync(user));

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl ?? "/home");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load the Bootstrap JavaScript module if needed
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "/_content/Barrydale/js/bootstrap-interop.js");
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
            {
                // Ignore JavaScript interop errors during static rendering
            }
            catch (Exception)
            {
                // Fallback if the module approach doesn't work - use direct evaluation
                try
                {
                    await JSRuntime.InvokeVoidAsync("eval", @"
                        window.showErrorModal = function() {
                            var modalElement = document.getElementById('errorModal');
                            if (modalElement && typeof bootstrap !== 'undefined') {
                                var modal = new bootstrap.Modal(modalElement);
                                modal.show();
                            } else {
                                console.error('Modal element or bootstrap not found');
                            }
                        }
                    ");
                }
                catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
                {
                    // Ignore JS errors during static rendering
                }
            }
        }
        else if (showErrorAfterRender)
        {
            showErrorAfterRender = false;
            try
            {
                if (_module != null)
                {
                    await _module.InvokeVoidAsync("showModal", "errorModal");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showErrorModal");
                }
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
            {
                // Still in a static rendering phase or modal not ready
            }
            catch (Exception ex)
            {
                // Fallback - if we can't show the modal, at least log the error
                Console.WriteLine($"Error showing modal: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module != null)
            {
                await _module.DisposeAsync();
            }
        }
        catch
        {
            // Ignore disposal errors
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

<script>
    // Ensure Bootstrap is properly loaded
    if (typeof bootstrap === 'undefined') {
        console.warn('Bootstrap not found, attempting to load it');
        
        // Create and append the Bootstrap script if not already present
        if (!document.querySelector('script[src*="bootstrap.bundle.min.js"]')) {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js';
            script.integrity = 'sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL';
            script.crossOrigin = 'anonymous';
            document.body.appendChild(script);
            
            script.onload = function() {
                console.log('Bootstrap loaded successfully');
                // Check for an error message and show the modal if needed
                const errorText = document.querySelector('.error-message-text');
                if (errorText && errorText.textContent) {
                    setTimeout(function() {
                        const errorModal = document.getElementById('errorModal');
                        if (errorModal) {
                            const modal = new bootstrap.Modal(errorModal);
                            modal.show();
                        }
                    }, 500);
                }
            };
        }
    }
</script>
