@page "/login-page"
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Barrydale.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Welcome to Barrydale Tourism</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-logo">
            <div class="logo-circle">BT</div>
        </div>
        
        <div class="auth-header">
            <h1>Welcome Back</h1>
            <p>Sign in to continue to Barrydale Tourism</p>
        </div>
        
        <StatusMessage Message="@errorMessage" />
        
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="auth-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email" class="text-center">Email Address</label>
                <InputText @bind-Value="Input.Email" class="form-control" id="email" autocomplete="username" aria-required="true" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="error-message" />
            </div>
            
            <div class="form-group">
                <label for="password" class="text-center">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="error-message" />
            </div>
            
            <div class="form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                <label class="form-check-label" for="rememberMe">Remember me</label>
            </div>
            
            <button type="submit" class="btn-submit">Sign In</button>
            
            <div class="auth-footer">
                <span>Don't have an account?</span>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="auth-link">Register</a>
            </div>
        </EditForm>
    </div>
</div>

<style>
    :root {
        --primary-color: #3498db;
        --primary-dark: #2980b9;
        --text-color: #333;
        --text-light: #7f8c8d;
        --border-color: #e1e1e1;
        --background-color: #3498db;
        --error-color: #e74c3c;
        --card-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    }

    /* Main container */
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: var(--background-color);
        padding: 1.5rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Card styles */
    .auth-card {
        width: 100%;
        max-width: 450px;
        background-color: white;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        padding: 2.5rem 2.5rem;
        overflow: hidden;
    }

    /* Logo */
    .auth-logo {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .logo-circle {
        width: 70px;
        height: 70px;
        background-color: var(--primary-color);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 1.75rem;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.2);
    }

    /* Header */
    .auth-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .auth-header h1 {
        color: var(--text-color);
        font-size: 1.75rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .auth-header p {
        color: var(--text-light);
        font-size: 0.95rem;
    }

    /* Form */
    .auth-form {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        padding: 0 10px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        text-align: center;
    }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 0.25rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background-color: #f8f9fa;
        transition: all 0.2s ease;
        text-align: center;
        max-width: 95%;
        margin: 0 auto;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.15);
    }

    .form-control::placeholder {
        color: #aaa;
        text-align: center;
    }

    /* Checkbox */
    .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 0.25rem;
    }

    .form-check-input {
        width: 1rem;
        height: 1rem;
        border-radius: 3px;
        cursor: pointer;
        accent-color: var(--primary-color);
    }

    .form-check-label {
        font-size: 0.9rem;
        color: var(--text-light);
        cursor: pointer;
    }

    /* Button */
    .btn-submit {
        margin-top: 0.75rem;
        width: 95%;
        margin: 0.75rem auto 0;
        padding: 0.9rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-submit:hover {
        background-color: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(52, 152, 219, 0.2);
    }

    .btn-submit:active {
        transform: translateY(0);
    }

    /* Footer */
    .auth-footer {
        margin-top: 1.5rem;
        text-align: center;
        font-size: 0.9rem;
        color: var(--text-light);
    }

    .auth-link {
        color: var(--primary-color);
        font-weight: 500;
        text-decoration: none;
        margin-left: 0.3rem;
        transition: color 0.2s;
    }

    .auth-link:hover {
        color: var(--primary-dark);
        text-decoration: underline;
    }

    /* Error message */
    .error-message {
        color: var(--error-color);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        text-align: center;
    }

    /* Responsive */
    @@media (max-width: 576px) {
        .auth-card {
            padding: 2rem 1.5rem;
        }
        
        .logo-circle {
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
        }
        
        .auth-header h1 {
            font-size: 1.5rem;
        }
    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
